var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DFUtils","category":"page"},{"location":"#DFUtils","page":"Home","title":"DFUtils","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DFUtils]","category":"page"},{"location":"#DFUtils.complete-Tuple{Any,Vararg{Any,N} where N}","page":"Home","title":"DFUtils.complete","text":"complete(df, cols...; replace_missing = missing)\n\nCreates a DataFrame that has rows all combinations of cols.... Optionally fill missing values in other columns with replace_missing.\n\n\n\n\n\n","category":"method"},{"location":"#DFUtils.realtype-Tuple{Array{T,1} where T}","page":"Home","title":"DFUtils.realtype","text":"realtype(v; replace_string = true)\n\nFinds a subtype of Real that v can be converted to. Automatically handles missings in vectors and optionally treats Strings that cannot be parsed to any Real with missing\n\n\n\n\n\n","category":"method"},{"location":"#DFUtils.toReal-Tuple{Array{T,1} where T}","page":"Home","title":"DFUtils.toReal","text":"toReal(v; replace_string = true, threads = length(v) > 500)\n\nConverts v to a Vector{T} where T <: Real. Automatically adds Union{T, Missing} if necessary and optionally replaces Stringss that cannot be parsed with missing.\n\n\n\n\n\n","category":"method"}]
}
